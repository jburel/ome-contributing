<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
	  <!-- New body template to add a custom footer block : ajp, Fri 10 Jun 2011 13:48:56 BST -->


  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE8" />
    <link rel="stylesheet" type="text/css" media="screen" href="/ome/chrome/agilo/stylesheet/agilo_theme.css" />
    <link rel="stylesheet" type="text/css" media="print" href="/ome/chrome/agilo/stylesheet/print.css" />
    <title>
      Search.java on proposals/Attributes – Attachment
     – OME
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="search" href="/ome/search" />
        <link rel="help" href="/ome/wiki/TracGuide" />
        <link rel="alternate" href="/ome/raw-attachment/wiki/proposals/Attributes/Search.java" type="text/x-java; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/ome/wiki/proposals/Attributes" title="proposals/Attributes" />
        <link rel="start" href="/ome/wiki" />
        <link rel="stylesheet" href="/ome/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/ome/chrome/agilo_common/css/licenseNotifier.css" type="text/css" /><link rel="stylesheet" href="/ome/chrome/agilo_pro/css/agilo_pro.css" type="text/css" /><link rel="stylesheet" href="/ome/chrome/agilo/stylesheet/agilo.css" type="text/css" />
        <link rel="shortcut icon" href="/ome/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/ome/chrome/site/favicon.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/ome/search/opensearch" title="Search OME" />
    <script type="text/javascript" src="/ome/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/ome/chrome/common/js/babel.js"></script><script type="text/javascript" src="/ome/chrome/common/js/trac.js"></script><script type="text/javascript" src="/ome/chrome/common/js/search.js"></script><script type="text/javascript" src="/ome/chrome/agilo_common/js/licenseNotifier.js"></script><script type="text/javascript" src="/ome/chrome/agilo/js/sidebar.js"></script><script type="text/javascript" src="/ome/chrome/agilo/js/cookies.js"></script><script type="text/javascript" src="/ome/chrome/agilo/js/settings.js"></script><script type="text/javascript" src="/ome/chrome/agilo/js/collapse.js"></script><script type="text/javascript" src="/ome/chrome/agilo/js/ie-patches.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/ome/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript" src="/ome/chrome/common/js/folding.js"></script><script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
	<script type="text/javascript" src="/ome/chrome/agilo/js/lib/jquery.form.js"></script>
    <script type="text/javascript" src="/ome/chrome/agilo/js/lib/jquery.cookie.js"></script>
	<script type="text/javascript" src="/ome/chrome/agilo/js/third_parties_hacks.js"></script>
	<script type="text/javascript" src="/ome/chrome/agilo/js/utilities.js"></script>
	<script type="text/javascript">
	//<![CDATA[
		// Initialize the variables right at the start, so other js can use it in document.ready handlers
		BASE_URL = "/ome";
		CHROME_URL = "/ome/chrome";
		// Normalise base url pattern so it also works with mod_python which can hickup on double slashes...
		if ((/\/$/).test(BASE_URL))
			BASE_URL = BASE_URL.slice(0, -1);
		// No caching of ajax. Ever. Especially in IE 7!
		$.ajaxSetup({cache: false});
		// If we use metadata we want to put json into the data attribute
		if ($.metadata)
			$.metadata.setType('attr', 'data');
		// Disable selection on the navigation
		$(document).ready(function() {
			setTimeout('if ($.fn.disableSelection) $(".menu").disableSelection()',500);
		});
	//]]>
	</script>
	    <link rel="stylesheet" type="text/css" href="/ome/chrome/site/style.css" />
	  </head>
	<body>
	<div class="menu">
	<form class="search" id="search_form" action="/ome/search" method="get">
	<label>Search</label>
	<input type="text" id="proj-search" name="q" size="18" value="" />
	</form>
        <div id="project_logo_container">
            <a id="logo" href="http://trac.openmicroscopy.org.uk/ome">
                <img src="/ome/chrome/site/my_logo.png" alt="OME" />
            </a>
        </div>
        <ul class="button group mainnav">
		                <li class="active"><a href="/ome/wiki" class="iconWiki">Wiki</a></li>
		                <li><a href="/ome/timeline" class="iconTimeline">Timeline</a></li>
		                <li><a href="/ome/roadmap" class="iconRoadmap">Roadmap</a></li>
		                <li><a href="/ome/browser" class="iconBrowser">Browse Source</a></li>
		                <li><a href="/ome/report" class="iconTickets">View Tickets</a></li>
		                <li><a href="/ome/search" class="iconSearch">Search</a></li>
		</ul>
        <ul class="button group metanav">
		                <li><a href="/ome/login" class="iconLogin">Login</a></li>
		                <li><a href="/ome/agilo-help">Help/Guide</a></li>
		                <li><a href="/ome/about" class="iconAbout">About Trac</a></li>
		                <li><a href="/ome/prefs" class="iconPrefs">Preferences</a></li>
			<li><a href="http://www.agile42.com/">agile42</a></li>
		</ul>
	</div>
	<div class="sidebar"><!-- TODO: make this a harmonica, or add an all toggle -->
	<!-- TODO: fix the empty space at the bottom. -->
		<label>Tickets</label>
		<ul class="tickets tree">
		</ul>
    <label>Wiki</label>
	<ul class="wiki tree">
	</ul>
	</div>
	<div class="main"><!-- Main Content -->
	<div id="ctxtnav" class="nav">
	<h2>Context Navigation</h2>
	<ul>
		<li class="first last"><a href="/ome/wiki/proposals/Attributes">Back to proposals/Attributes</a></li>
	</ul>
	<hr />
	</div>
    <div id="content" class="attachment">
        <h1><a href="/ome/wiki/proposals/Attributes">proposals/Attributes</a>: Search.java</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File Search.java,
                <span title="15278 bytes">14.9 KB</span>
                (added by jmoore, <a class="timeline" href="/ome/timeline?from=2007-11-19T16%3A10%3A17Z&amp;precision=second" title="2007-11-19T16:10:17Z in Timeline">5 years</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>/*</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td> *   $Id$</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td> *</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td> *   Copyright 2007 Glencoe Software, Inc. All rights reserved.</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td> *   Use is subject to license terms supplied in LICENSE.txt</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td> */</td></tr><tr><th id="L7"><a href="#L7">7</a></th><td></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td>package ome.api;</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>import java.sql.Timestamp;</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>import java.util.List;</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>import java.util.Map;</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>import ome.conditions.ApiUsageException;</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>import ome.model.IObject;</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>import ome.model.annotations.Annotation;</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>import ome.model.core.OriginalFile;</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>import ome.model.internal.Details;</td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>import ome.parameters.Parameters;</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>import org.hibernate.search.ProjectionConstants;</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>/**</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td> * Central search interface, allowing Web2.0 style queries. Each {@link Search}</td></tr><tr><th id="L25"><a href="#L25">25</a></th><td> * instance keeps up with several queries and lazily-loads the results as</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td> * {@link #next()} and {@link #results()} are called. These queries are created</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td> * by the "By*" methods.</td></tr><tr><th id="L28"><a href="#L28">28</a></th><td> * </td></tr><tr><th id="L29"><a href="#L29">29</a></th><td> * Each instance also has a number of settings which can all be changed from</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td> * their defaults via accessors, e.g.{@link #setBatchSize(int)} or</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td> * {@link #setCaseSensitivity(boolean)}.</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td> * </td></tr><tr><th id="L33"><a href="#L33">33</a></th><td> * The only methods which are required for the proper functioning of a</td></tr><tr><th id="L34"><a href="#L34">34</a></th><td> * {@link Search} instance are:</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td> * &lt;ul&gt;</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td> * &lt;li&gt;{@link #onlyTypes(Class...)} OR {@link #allTypes()}&lt;/li&gt;</td></tr><tr><th id="L37"><a href="#L37">37</a></th><td> * &lt;li&gt;Any By* method to create a query&lt;/li&gt;</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td> * &lt;/ul&gt;</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td> * Use of the {@link #allTypes()} method is discouraged, since it is possibly</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td> * very resource intensive, which is why any attempt to receive results without</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td> * specifically setting types or allowing all is prohibited.</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td> * </td></tr><tr><th id="L43"><a href="#L43">43</a></th><td> * @author Josh Moore, josh at glencoesoftware.com</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td> * </td></tr><tr><th id="L45"><a href="#L45">45</a></th><td> * @see ome.api.IQuery</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td> */</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>public interface Search extends ome.api.StatefulServiceInterface,</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>        java.util.Iterator&lt;IObject&gt; {</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>    // Constants ~</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>    // =========================================================================</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>    /**</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>     * {@link String} constant used to look up the score value of Lucene queries</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>     * returned by this interface. Not all queries will fill this value.</td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>     */</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>    public final static String SCORE = ProjectionConstants.SCORE;</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>    /**</td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>     * {@link String} constant used to look up the boost value of Lucene queries</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>     * returned by this interface. Not all queries will fill this value.</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>     */</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>    public final static String BOOST = ProjectionConstants.BOOST;</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>    /**</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>     * Default {@link #getBatchSize() batch size}</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>     */</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>    public final static int DEFAULT_BATCH_SIZE = 1000;</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>    /**</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>     * Default {@link #isMergedBatched() merged-bathces}</td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>     */</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>    public final static boolean DEFAULT_MERGED_BATCHES = false;</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>    /**</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>     * Default {@link #isCaseSensitive() case sensitivity}</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>     */</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>    public final static boolean DEFAULT_CASE_SENSITIVTY = false;</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>    /**</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>     * Default {@link #isUseProjections() use-projections}</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>     */</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>    public final static boolean DEFAULT_USE_PROJECTIONS = false;</td></tr><tr><th id="L84"><a href="#L84">84</a></th><td></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>    /**</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>     * Default {@link #isReturnUnloaded() return-unloaded}</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>     */</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>    public final static boolean DEFAULT_RETURN_UNLOADED = false;</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>    // Non-Query State ~</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>    // =========================================================================</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>    /**</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>     * Returns the number of active queries. This means that</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>     * &lt;code&gt;activeQueries&lt;/code&gt; gives the minimum number of remaining calls</td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>     * to {@link #results()} when batches are not</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>     * {@link #isMergedBatched() merged}.</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>     * </td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>     * @return number of active queries</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>     */</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>    int activeQueries();</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>    /**</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>     * Sets the maximum number of results that will be returned by one call to</td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>     * {@link #results()}. If batches are not {@link #isMergedBatched() merged},</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>     * then results may often be less than the batch size. If batches are</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>     * {@link #isMergedBatched()} merged, then only the last call to</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>     * {@link #results()} can be less than batch size.</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>     * </td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>     * @param size</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>     *            maximum number of results per call to {@link #results()}</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>     */</td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>    void setBatchSize(int size);</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>    /**</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>     * Returns the current batch size. If {@link #setBatchSize(int)} has not</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>     * been called, the {@link #DEFAULT_BATCH_SIZE default value} will be in</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>     * effect.</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>     * </td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>     * @return maximum number of results per call to {@link #results()}</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>     * @see #DEFAULT_BATCH_SIZE</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>     */</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>    int getBatchSize();</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>    /**</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>     * Set whether or not results from two separate queries can be returned in</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>     * the same call to {@link #results()}.</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>     */</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>    void setMergedBatches(boolean merge);</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>    /**</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>     * Returns the current merged-batches setting. If</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>     * {@link #setMergedBatches(boolean)} has not been called, the</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>     * {@link #DEFAULT_MERGED_BATCHES default value} will be in effect.</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>     */</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>    boolean isMergedBatched();</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>    /**</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>     * Sets the case sensitivity on all queries where case-sensitivity is</td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>     * supported.</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>     */</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>    void setCaseSentivice(boolean caseSensitive);</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>    /**</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>     * Returns the current case sensitivity setting. If</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>     * {@link #setCaseSentivice()} has not been called, the</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>     * {@link #DEFAULT_CASE_SENSITIVTY default value} will be in effect.</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>     */</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>    boolean isCaseSensitive();</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>    /**</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>     * Determines if Lucene queries should not hit the database. Instead all</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>     * values which are stored in the index will be loaded into the object,</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>     * which includes the id. However, the entity will not be marked unloaded</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>     * and therefore it is especially important to not allow a</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>     * projection-instance to be saved back to the server. This can result in</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>     * DATA LOSS.</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>     */</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>    void setUseProjections(boolean useProjections);</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>    /**</td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>     * Returns the current use-projection setting. If true, the client must be</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>     * careful with all results that are returned. See</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>     * {@link #setUseProjections(boolean) for more.} If</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>     * {@link #setUseProjections(boolean)} has not been called, the</td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>     * {@link #DEFAULT_USE_PROJECTIONS} will be in effect.</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>     */</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>    void isUseProjections();</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>    /**</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>     * Determines if all results should be returned as unloaded objects. This is</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>     * particularly useful for creating lists for further querying via</td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>     * {@link IQuery}. This value overrides the</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>     * {@link #setUseProjections(boolean)} setting.</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>     */</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>    void setReturnUnloaded(boolean returnUnloaded);</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>    /**</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>     * Returns the current return-unloaded setting. If true, all returned</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>     * entities will be unloaded. If {@link #setReturnUnloaded(boolean)} has not</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>     * been called, the {@link #DEFAULT_RETURN_UNLOADED default value} will be</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>     * in effect.</td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>     */</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>    void isReturnUnloaded();</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>    // Filters ~~~~~~~~~~~~~~~~~~~~~</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>    /**</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>     * Restricts the search to a single type. All return values will match this</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>     * type.</td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>     */</td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>    &lt;T extends IObject&gt; void onlyType(Class&lt;T&gt; klass);</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>    /**</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>     * Restricts searches to a set of types. The entities returned are</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>     * guaranteed to be one of these types.</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>     */</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>    &lt;T extends IObject&gt; void onlyTypes(Class&lt;T&gt;... classes);</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>    /**</td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>     * Permits all types to be returned. For some types of queries, this carries</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>     * a performance penalty as every database table must be hit.</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>     */</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>    void allTypes();</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>    /**</td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>     * Uses the {@link Details#getOwner()} and {@link Details#getGroup()}</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>     * information to restrict the entities which will be returned. If both are</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>     * non-null, the two restrictions are joined by an AND.</td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>     * </td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>     * @param d</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>     *            Can be null, in which the previous restriction is removed.</td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>     */</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>    void onlyOwnedBy(Details d);</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>    /**</td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>     * Restricts the time between which an entity may have been created.</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>     * </td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>     * @param start</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>     *            Can be null, i.e. interval open to negative infinity.</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>     * @param stop</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>     *            Can be null, i.e. interval opens to positive infinity.</td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>     */</td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>    void onlyCreatedBetween(java.sql.Timestamp start, java.sql.Timestamp stop);</td></tr><tr><th id="L225"><a href="#L225">225</a></th><td></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>    /**</td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>     * Restricts the time between which an entity may have last been modified.</td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>     * </td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>     * @param start</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>     *            Can be null, i.e. interval open to negative infinity.</td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>     * @param stop</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>     *            Can be null, i.e. interval open to positive infinity.</td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>     */</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>    void onlyModifiedBetween(java.sql.Timestamp start, java.sql.Timestamp stop);</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td></td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>    /**</td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>     * Restricts entities by the time in which any annotation (which matches the</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>     * other filters) was added them. This matches the</td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>     * {@link Details#getCreationEvent() creation event} of the</td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>     * {@link Annotation}.</td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>     * </td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>     * @param start</td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>     *            Can be null, i.e. interval open to negative infinity.</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>     * @param stop</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>     *            Can be null, i.e. interval open to positive infinity.</td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>     */</td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>    void onlyAnnotatedBetween(Timestamp start, Timestamp stop);</td></tr><tr><th id="L248"><a href="#L248">248</a></th><td></td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>    /**</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>     * Restricts entities by who has annotated them with an {@link Annotation}</td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>     * matching the other filters. As {@link #onlyOwnedBy(Details)}, the</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>     * {@link Details#getOwner()} and {@link Details#getGroup()} information is</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>     * combined with an AND condition.</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>     * </td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>     * @param d</td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>     *            Can be null, in which case any previous restriction is</td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>     *            removed.</td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>     */</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>    void onlyAnnotatedBy(Details d);</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td></td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>    /**</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>     * Restricts entities to having an {@link Annotation} of the given types.</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>     * This is useful in combination with the other onlyAnnotated* methods to</td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>     * say, e.g., only annotated with a file by user X.</td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>     * </td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>     * @param &lt;A&gt;</td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>     * @param classes</td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>     *            Can be empty, in which restriction is removed.</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>     */</td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>    &lt;A extends ome.model.annotations.Annotation&gt; void onlyAnnotatedWith(</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>            Class&lt;A&gt;... classes);</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td></td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>    // Fetches ~~~~~~~~~~~~~~~~~~~~~~</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td></td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>    /**</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>     * Queries the database for all {@link Annotation annotations} of the given</td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>     * types for all returned instances.</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>     * </td></tr><tr><th id="L279"><a href="#L279">279</a></th><td>     * @param classes</td></tr><tr><th id="L280"><a href="#L280">280</a></th><td>     *            Can be empty, which removes previous fetch setting.</td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>     */</td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>    &lt;T extends IObject&gt; void fetchAnnotations(Class&lt;T&gt;... classes);</td></tr><tr><th id="L283"><a href="#L283">283</a></th><td></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>    /**</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>     * Adds a fetch clause for loading non-annotation fields of returned</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>     * entities. Each fetch is a hibernate clause in dot notation.</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td>     * </td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>     * @param &lt;T&gt;</td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>     * @param fetches</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td>     *            Can be empty, which removes previous fetch setting.</td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>     */</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>    &lt;T extends IObject&gt; void fetchAlso(String... fetches);</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td></td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>    // Reset ~~~~~~~~~~~~~~~~~~~~~~~~~</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>    /**</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>     * Resets all settings (non-query state) to the original default values, as</td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>     * if the instance had just be created.</td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>     */</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td>    void resetDefaults();</td></tr><tr><th id="L301"><a href="#L301">301</a></th><td></td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>    // Query State ~</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td>    // =========================================================================</td></tr><tr><th id="L304"><a href="#L304">304</a></th><td></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td>    /**</td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>     * Finds all entities which are annotated with the given tags.</td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>     * </td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>     * @param tags</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>     *            Not null nor empty.</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td>     */</td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>    void ByTags(String[] tags);</td></tr><tr><th id="L312"><a href="#L312">312</a></th><td></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>    /**</td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>     * Returns transient (without ID) {@link TagAnnotation} instances which</td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>     * represent all the {@link TagAnnotation tags} in the given group. The</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>     * entities are transient and without ownership since multiple users can own</td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>     * the same tag. This method will override settings for types.</td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>     * </td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>     * @param group</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>     *            Can be null or empty to return all tags.</td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>     */</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>    void ByGroupForTags(String group);</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td></td></tr><tr><th id="L324"><a href="#L324">324</a></th><td>    /**</td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>     * Creates a query which will return transient (without ID)</td></tr><tr><th id="L326"><a href="#L326">326</a></th><td>     * {@link TagAnnotation} instances which represent all the</td></tr><tr><th id="L327"><a href="#L327">327</a></th><td>     * {@link TagAnnotation tag groups} which the given tag belongs to. The</td></tr><tr><th id="L328"><a href="#L328">328</a></th><td>     * entities are transient and without ownership since multiple users can own</td></tr><tr><th id="L329"><a href="#L329">329</a></th><td>     * the same tag group. This method will override settings for types.</td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>     * </td></tr><tr><th id="L331"><a href="#L331">331</a></th><td>     * @param tag</td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>     *            Can be null or empty to return all groups.</td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>     */</td></tr><tr><th id="L334"><a href="#L334">334</a></th><td>    void ByTagForGroups(String tag);</td></tr><tr><th id="L335"><a href="#L335">335</a></th><td></td></tr><tr><th id="L336"><a href="#L336">336</a></th><td>    /**</td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>     * Passes the query as is to the Lucene backend.</td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>     * </td></tr><tr><th id="L339"><a href="#L339">339</a></th><td>     * @param query</td></tr><tr><th id="L340"><a href="#L340">340</a></th><td>     *            May not be null or of zero length.</td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>     */</td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>    void ByFullText(String query);</td></tr><tr><th id="L343"><a href="#L343">343</a></th><td></td></tr><tr><th id="L344"><a href="#L344">344</a></th><td>    /**</td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>     * Builds a Lucene query and passes it to {@link #ByFullText(String)}.</td></tr><tr><th id="L346"><a href="#L346">346</a></th><td>     * </td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>     * @param some</td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>     *            Some (at least one) of these terms must be present in the</td></tr><tr><th id="L349"><a href="#L349">349</a></th><td>     *            document. May be null.</td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>     * @param must</td></tr><tr><th id="L351"><a href="#L351">351</a></th><td>     *            All of these terms must be present in the document. May be</td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>     *            null.</td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>     * @param none</td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>     *            None of these terms may be present in the document. May be</td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>     *            null.</td></tr><tr><th id="L356"><a href="#L356">356</a></th><td>     */</td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>    void BySomeMustNone(String[] some, String[] must, String[] none);</td></tr><tr><th id="L358"><a href="#L358">358</a></th><td></td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>    /**</td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>     * Provides the main {@link IQuery} method here to take advantage of the</td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>     * various filters which are provided. See</td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>     * {@link IQuery#findAllByQuery(String, Parameters)} for the semantics.</td></tr><tr><th id="L363"><a href="#L363">363</a></th><td>     * </td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>     * @param query</td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>     *            Not null.</td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>     * @param p</td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>     *            May be null. Defaults are then in effect.</td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>     * @see IQuery#findAllByQuery(String, Parameters)</td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>     */</td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>    void ByHqlQuery(String query, Parameters p);</td></tr><tr><th id="L371"><a href="#L371">371</a></th><td></td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>    /**</td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>     * Finds entities annotated with an {@link Annotation} similar to the</td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>     * example. This does not use Hibernate's</td></tr><tr><th id="L375"><a href="#L375">375</a></th><td>     * {@link IQuery#findByExample(IObject) Query-By-Example} mechanism, since</td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>     * that cannot handle joins. The fields which are used are:</td></tr><tr><th id="L377"><a href="#L377">377</a></th><td>     * &lt;ul&gt;</td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>     * &lt;li&gt;the main content of the annotation : String,</td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>     * {@link OriginalFile#getId()}, etc.&lt;/li&gt;</td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>     * &lt;li&gt;details.owner&lt;/li&gt;</td></tr><tr><th id="L381"><a href="#L381">381</a></th><td>     * &lt;li&gt;details.group&lt;/li&gt;</td></tr><tr><th id="L382"><a href="#L382">382</a></th><td>     * &lt;/ul&gt;</td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>     * Note this method is a superset of {@link #ByTags(String[])}, which can</td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>     * be replaced via: &lt;code&gt;</td></tr><tr><th id="L385"><a href="#L385">385</a></th><td>     *   search.ByAnnotatedWith(new TagAnnotation("string"));</td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>     * &lt;/code&gt;</td></tr><tr><th id="L387"><a href="#L387">387</a></th><td>     * </td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>     * @param example</td></tr><tr><th id="L389"><a href="#L389">389</a></th><td>     */</td></tr><tr><th id="L390"><a href="#L390">390</a></th><td>    void ByAnnotatedWith(Annotation example);</td></tr><tr><th id="L391"><a href="#L391">391</a></th><td></td></tr><tr><th id="L392"><a href="#L392">392</a></th><td>    /**</td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>     * Removes all active queries (leaving {@link #resetDefaults() settings}</td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>     * alone), such that {@link #activeQueries()} will return 0.</td></tr><tr><th id="L395"><a href="#L395">395</a></th><td>     */</td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>    void clearQueries();</td></tr><tr><th id="L397"><a href="#L397">397</a></th><td></td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>    // Retrieval ~</td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>    // =========================================================================</td></tr><tr><th id="L400"><a href="#L400">400</a></th><td></td></tr><tr><th id="L401"><a href="#L401">401</a></th><td>    /**</td></tr><tr><th id="L402"><a href="#L402">402</a></th><td>     * Returns true if another call to {@link #next()} is valid. A call to</td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>     * {@link #next()} may throw an exception for another reason, however.</td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>     */</td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>    boolean hasNext();</td></tr><tr><th id="L406"><a href="#L406">406</a></th><td></td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>    /**</td></tr><tr><th id="L408"><a href="#L408">408</a></th><td>     * Returns the next entity from the current query. If the previous call</td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>     * returned the last entity from a given query, the first entity from the</td></tr><tr><th id="L410"><a href="#L410">410</a></th><td>     * next query will be returned and {@link #activeQueries()} decremented.</td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>     * Since this method only returns the entity itself, a single call to</td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>     * {@link #currentMetadata()} may follow this call to gather the extra</td></tr><tr><th id="L413"><a href="#L413">413</a></th><td>     * metadata which is returned in the map via {@link #results}.</td></tr><tr><th id="L414"><a href="#L414">414</a></th><td>     * </td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>     * @throws ApiUsageException</td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>     *             if there are no active queries or if</td></tr><tr><th id="L417"><a href="#L417">417</a></th><td>     */</td></tr><tr><th id="L418"><a href="#L418">418</a></th><td>    &lt;T extends IObject&gt; T next() throws ApiUsageException;</td></tr><tr><th id="L419"><a href="#L419">419</a></th><td></td></tr><tr><th id="L420"><a href="#L420">420</a></th><td>    /**</td></tr><tr><th id="L421"><a href="#L421">421</a></th><td>     * Provides access to the extra query information (for example Lucene score</td></tr><tr><th id="L422"><a href="#L422">422</a></th><td>     * and boost values) for a single call to {@link #next()}. This method may</td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>     * only be called once for any given call to {@link #next()}.</td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>     */</td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>    List&lt;Annotation&gt; currentMetadata();</td></tr><tr><th id="L426"><a href="#L426">426</a></th><td></td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>    /**</td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>     * Unsupported operation.</td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>     */</td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>    void remove() throws UnsupportedOperationException;</td></tr><tr><th id="L431"><a href="#L431">431</a></th><td></td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>    /**</td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>     * Returns up to {@link #getBatchSize() batch size} number of results along</td></tr><tr><th id="L434"><a href="#L434">434</a></th><td>     * with the related query metadata. If</td></tr><tr><th id="L435"><a href="#L435">435</a></th><td>     * {@link #isMergedBatched() batches are merged} then the results from</td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>     * multiple queries may be returned together.</td></tr><tr><th id="L437"><a href="#L437">437</a></th><td>     */</td></tr><tr><th id="L438"><a href="#L438">438</a></th><td>    &lt;T extends IObject&gt; Map&lt;T, List&lt;Annotation&gt;&gt; results();</td></tr><tr><th id="L439"><a href="#L439">439</a></th><td></td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>}</td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/ome/raw-attachment/wiki/proposals/Attributes/Search.java">Original Format</a>
        </li>
      </ul>
    </div>
	<div id="bottom">
	<p><span class="agilo_version">1.3.2-PRO</span> © 2008-2010
	<a href="http://www.agile42.com/" target="_blank">agile42</a> all
	rights reserved
        (this page was served in: 0.103824 sec.)
    </p>
	</div>
	</div>
		<div class="ome-footer">
			<p>
			  <acronym title="Copyright">©</acronym> 2000-2012 University of
			  Dundee &amp; Open Microscopy Environment. All Rights Reserved.
			  <a href="/ome/wiki/CopyrightAndLicense">…</a><br />
			  OME source code is available under the <a href="/ome/wiki/CopyrightAndLicense">
			  GNU General public license</a> or through commercial license from
			<a href="http://www.glencoesoftware.com/">Glencoe Software</a>
		  </p>
		</div>
		<div class="left-ribbon-holder">
			<img id="left-hire-ribbon" src="https://www.openmicroscopy.org/site/art/were-hiring-ribbon-100x100.png" usemap="#left-hire-ribbon-map" />
			<map id="_left-hire-ribbon-map" name="left-hire-ribbon-map">
				<area shape="poly" coords="0,63,63,0,87,0,0,87," href="https://www.openmicroscopy.org/site/community/jobs" alt="We're Hiring!" title="OME Jobs" />
				<area shape="poly" coords="0,0,0,60,60,0," href="/ome" />
				<area shape="poly" coords="90,0,100,0,100,70,28,70," href="/ome" />
			</map>
		</div>
	  </body>
</html>